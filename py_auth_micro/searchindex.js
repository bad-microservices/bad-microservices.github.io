Search.setIndex({"titles": ["API Reference", "Examples", "Getting started", "General", "Content"], "terms": {"thi": [0, 3], "hold": 0, "differ": 0, "class": 0, "need": [0, 2], "packag": 0, "The": [0, 2, 3], "follow": [0, 2], "ar": [0, 3], "provid": [0, 2, 3], "ldapconfig": [0, 4], "configur": 0, "ldap": [0, 2, 3, 4], "connect": 0, "dbconfig": [0, 4], "db": 0, "appconfig": [0, 4], "gener": [0, 4], "set": 0, "regard": 0, "py_auth_micro": [0, 2, 3, 4], "address": [0, 4], "127": 0, "0": 0, "1": 0, "389": 0, "base_dn": [0, 4], "ou": 0, "user": [0, 3, 4], "dc": 0, "ad": [0, 2, 3], "local": [0, 4], "group": [0, 4], "allowed_to_login": 0, "groups_prefix": [0, 4], "api_perm": 0, "domain": [0, 4], "ca_fil": [0, 4], "none": 0, "sourc": [0, 4], "store": [0, 3], "our": 0, "relat": 0, "variabl": [0, 4], "str": 0, "server": [0, 2], "base": 0, "dn": 0, "option": [0, 2], "allow": 0, "login": [0, 4], "itself": 0, "default": 0, "prefix": 0, "should": 0, "log": [0, 3], "3306": 0, "path": 0, "ca": 0, "file": 0, "us": [0, 2, 3], "databas": [0, 4], "password": [0, 4], "host": [0, 4], "port": [0, 4], "A": 0, "ha": 0, "function": 0, "get": [0, 4], "tortoiseorm": 0, "compliant": 0, "string": 0, "dictionari": 0, "name": 0, "which": [0, 3], "usernam": [0, 4], "ip": 0, "hostnam": 0, "int": 0, "an": [0, 2, 3], "If": 0, "specifi": 0, "creat": 0, "ssl": 0, "context": 0, "properti": 0, "sslcontext": [0, 4], "i": [0, 2, 3], "els": 0, "connection_str": [0, 4], "connectionstr": 0, "tortois": [0, 2], "orm": [0, 2], "valu": 0, "type": [0, 4], "to_dict": [0, 4], "connection_nam": 0, "dict": 0, "pass": 0, "result": 0, "part": 0, "you": [0, 2], "paramet": [0, 4], "return": [0, 4], "least": 0, "section": 0, "id_token_valid_tim": 0, "1440": 0, "access_token_valid_tim": 0, "5": 0, "allow_registr": 0, "fals": 0, "auto_activate_account": 0, "true": 0, "admin_group": 0, "admin": 0, "username_regex": 0, "za": 0, "z": 0, "_0": 0, "9": 0, "4": 0, "30": 0, "password_regex": 0, "email_regex": 0, "z0": 0, "_": 0, "61": 0, "inform": 0, "about": 0, "state": 0, "attirbut": 0, "how": 0, "long": 0, "id": [0, 3], "token": [0, 3, 4], "stai": 0, "valid": 0, "minut": 0, "24": 0, "hour": 0, "access": [0, 3], "bool": 0, "can": [0, 2, 3], "regist": 0, "themself": 0, "automat": 0, "activ": 0, "account": 0, "creation": 0, "administr": 0, "regex": 0, "check": 0, "r": 0, "email": [0, 4], "kinda": 0, "do": 0, "basic": 0, "some": 0, "modul": [0, 2], "other": [0, 3], "from": [0, 4], "librari": [0, 3], "authsourc": [0, 4], "enum": 0, "authentif": 0, "ldaphelp": [0, 4], "simplifi": 0, "interact": 0, "describ": 0, "possibl": 0, "support": 0, "authent": [0, 3], "app": 0, "ident": [0, 2, 3], "kerbero": [0, 4], "via": [0, 3, 4], "ldap_cfg": [0, 4], "help": 0, "while": 0, "instanti": 0, "bin": 0, "against": 0, "we": 0, "want": [0, 2], "extract": 0, "after": [0, 3], "he": [0, 3], "sucessfulli": 0, "get_group": [0, 4], "list": 0, "all": 0, "relev": 0, "usergroup": 0, "correct": 0, "sign": [0, 3], "alreadyexist": [0, 4], "contain": 0, "current": 0, "work": 0, "loginloc": [0, 4], "loginldap": [0, 4], "loginkerbero": [0, 4], "These": 0, "choosen": 0, "auth_typ": 0, "field": 0, "everi": 0, "entri": 0, "async": 0, "ldap_config": [0, 4], "credenti": 0, "ldapauth": 0, "rais": [0, 4], "valueerror": 0, "wrong": 0, "mathc": 0, "loginbaseclass": [0, 4], "kwarg": 0, "abstract": 0, "baseclass": 0, "implement": 0, "keyword": [0, 4], "argument": [0, 4], "instanc": 0, "call": 0, "self": 0, "_sync_group": 0, "sync": 0, "membership": 0, "successful": 0, "handler": 0, "_description_": 0, "_type_": 0, "hash": 0, "compar": 0, "bcrypt": [0, 2], "definit": 0, "sinc": 0, "thei": 0, "databs": 0, "entiti": 0, "around": 0, "issu": 0, "suppli": 0, "jwt": [0, 3], "header": 0, "onli": [0, 2], "have": 0, "one": 0, "per": 0, "time": 0, "bound": 0, "vhost": 0, "messag": 0, "broker": 0, "object": 0, "token_id": 0, "uniqu": 0, "kid": 0, "claim": 0, "verif": 0, "valid_until": 0, "datetim": 0, "well": 0, "so": 0, "exp": 0, "out": [0, 3], "make": 0, "sure": 0, "did": 0, "forg": 0, "trust": 0, "me": 0, "bro": 0, "last_us": 0, "timestamp": 0, "last": 0, "sign_method": 0, "signmethod": 0, "method": 0, "mehtod": 0, "jwtvalid": 0, "identifi": 0, "rabbitmq": 0, "For": 0, "exampl": [0, 4], "prod": 0, "product": 0, "test": 0, "get_id_jwt": [0, 4], "jwt_encod": [0, 4], "app_cfg": [0, 4], "new": 0, "jwtencod": 0, "misc": 0, "durat": 0, "static": 0, "verify_id_jwt": [0, 4], "jwt_valid": [0, 4], "id_jwt": 0, "look": 0, "up": 0, "issuer": 0, "ourself": 0, "verifi": 0, "request": [0, 3], "parti": 0, "its": 0, "doe": 0, "match": 0, "data": 0, "create_access_jwt": [0, 4], "It": 0, "": 0, "expect": 0, "beforehand": 0, "verify_token": 0, "encod": 0, "repres": 0, "password_hash": 0, "passwordhash": 0, "hi": [0, 3], "create_id_token": [0, 4], "app_config": 0, "sigingmethod": 0, "lifetim": 0, "revoke_id_token": [0, 4], "revok": 0, "delet": 0, "got": 0, "permiss": [0, 3], "most": 0, "common": 0, "In": 0, "registr": 0, "remov": 0, "easili": 0, "pars": 0, "json": 0, "userworkflow": [0, 4], "helper": 0, "miscellan": 0, "applic": 0, "get_al": [0, 4], "access_token": 0, "permissionerror": 0, "invalid": 0, "known": 0, "register_us": [0, 4], "password_confirm": 0, "confirm": 0, "resp_cod": 0, "200": 0, "oper": 0, "wa": 0, "get_us": [0, 4], "userinform": 0, "more": 0, "even": 0, "info": 0, "admin_create_us": [0, 4], "let": 0, "success": 0, "delete_us": [0, 4], "himself": 0, "change_us": [0, 4], "chang": 0, "Not": 0, "author": [0, 3], "sessionworkflow": [0, 4], "session": 0, "resp_data": 0, "id_token": 0, "logout": [0, 4], "given": [0, 3], "therebi": 0, "500": 0, "get_access_token": [0, 4], "groupworkflow": [0, 4], "kei": [0, 3], "create_group": [0, 4], "group_nam": 0, "alreadi": 0, "exist": 0, "action": 0, "delete_group": [0, 4], "add_user_to_group": [0, 4], "user_nam": 0, "add": 0, "remove_user_from_group": [0, 4], "python3": 2, "6": 2, "python": 2, "jwt_helper": 2, "asyncmi": 2, "depend": 2, "upstream": [2, 3], "avail": 2, "pip": 2, "just": 2, "run": 2, "command": 2, "m": 2, "py": 2, "auth": 2, "micro": [2, 3], "clone": 2, "repositori": 2, "git": 2, "http": 2, "github": 2, "com": 2, "bad": 2, "microservic": 2, "navig": 2, "folder": 2, "cd": 2, "small": 3, "also": 3, "locali": 3, "done": 3, "successfulli": 3, "With": 3, "send": 3, "servic": 3, "gain": 3, "accord": 3, "either": 3, "symetr": 3, "hmac": 3, "secret": 3, "rsa": 3, "index": 4, "start": 4, "requir": 4, "instal": 4, "pypi": 4, "api": 4, "refer": 4, "config": 4, "submodul": 4, "core": 4, "except": 4, "loginhandl": 4, "model": 4, "workflow": 4}, "objects": {"py_auth_micro": [[0, 0, 0, 1, "Config", ""], [0, 0, 0, 1, "Core", ""], [0, 0, 0, 1, "Exceptions", ""], [0, 0, 0, 1, "LoginHandler", ""], [0, 0, 0, 1, "Models", ""], [0, 0, 0, 1, "WorkFlows", ""]], "py_auth_micro.Config": [[0, 1, 1, 0, "AppConfig", "A class holding information about the general configuration State."], [0, 1, 1, 0, "DBConfig", "A Class holding our Database configuration"], [0, 1, 1, 0, "LDAPConfig", "a Configuration class storing our AD Related config"]], "py_auth_micro.Config.DBConfig.__init__": [[0, 2, 2, 0, "ca_file", "Path to an ca file. If specified it will create an ssl context. Defaults to None."], [0, 2, 2, 0, "database", "Name of the Database which should be used."], [0, 2, 2, 0, "host", "IP or DNS Hostname of the Database Server. Defaults to \"127.0.0.1\"."], [0, 2, 2, 0, "port", "Port of the Database Server. Defaults to 3306."], [0, 2, 2, 0, "user", "Username for the Database connection."]], "py_auth_micro.Config.DBConfig": [[0, 3, 1, 0, "connection_string", "Connectionstring for tortoise ORM using the specified Values"], [0, 3, 1, 0, "sslcontext", "if a ca_file is specified this is an SSLContext else it is None"], [0, 4, 1, 0, "to_dict", "This Function generates a TortoiseORM compliant Database Connection dict"]], "py_auth_micro.Config.DBConfig.to_dict": [[0, 2, 2, 0, "connection_name", "Name of this Database Connection. Defaults to \"default\"."]], "py_auth_micro.Config.LDAPConfig.__init__": [[0, 2, 2, 0, "address", "Server Address."], [0, 2, 2, 0, "base_dn", "Base DN for Users."], [0, 2, 2, 0, "ca_file", "Path to the CA File used for ldaps. Defaults to None."], [0, 2, 2, 0, "domain", "The Domain the user should log into. Defaults to 3306."], [0, 2, 2, 0, "group", "Group that allows the Login itself. Defaults to \"allowed_to_login\"."], [0, 2, 2, 0, "groups_prefix", "Prefix of groups that should be added to the User. Defaults to \"API_PERM\"."]], "py_auth_micro.Core": [[0, 1, 1, 0, "AuthSource", "Describes the Possible Authentification Sources Supported by this Library."], [0, 1, 1, 0, "LDAPHelper", "A class which helps interacting with an LDAP Server"]], "py_auth_micro.Core.AuthSource": [[0, 5, 1, 0, "KERBEROS", "Is used for authenticating users via Kerberos."], [0, 5, 1, 0, "LDAP", "Is used for authenticating users from an LDAP as Identity Provider."], [0, 5, 1, 0, "LOCAL", "Is used for authenticating users from the app database"]], "py_auth_micro.Core.LDAPHelper.__init__": [[0, 2, 2, 0, "password", "Password of the user."], [0, 2, 2, 0, "username", "Name of the User we want to log in with."]], "py_auth_micro.Core.LDAPHelper": [[0, 3, 1, 0, "email", "Extracts the Users email after he sucessfully logged in (if he needs to be created in the Database)"], [0, 4, 1, 0, "get_groups", "This function will return a list of all relevant Groups."], [0, 4, 1, 0, "login", "This Function checks if the User has the correct Usergroup to sign in."]], "py_auth_micro.Exceptions": [[0, 6, 1, 0, "AlreadyExists", ""]], "py_auth_micro.LoginHandler": [[0, 1, 1, 0, "LoginBaseClass", "Abstract Baseclass for Authenticating Users"], [0, 1, 1, 0, "LoginKerberos", ""], [0, 1, 1, 0, "LoginLDAP", "Login Provider for LDAP/AD Users"], [0, 1, 1, 0, "LoginLocal", "Login Handler for Local Users"], [0, 7, 1, 0, "login", "Function which logs a user in with specified Credentials."]], "py_auth_micro.LoginHandler.LoginLDAP": [[0, 4, 1, 0, "login", "Checks User Credentials against the LDAP/AD."]], "py_auth_micro.LoginHandler.LoginLocal": [[0, 4, 1, 0, "login", "Hashes the users password and compares it against the Database."]], "py_auth_micro.LoginHandler.login": [[0, 2, 2, 0, "ldap_config", "Configuration for LDAPAuth. Defaults to None."], [0, 2, 2, 0, "password", "Password of the User"], [0, 2, 2, 0, "username", "Username of the User"]], "py_auth_micro.Models": [[0, 1, 1, 0, "Group", "Database Model Representing a Group."], [0, 1, 1, 0, "Token", "Databse Entity Holding Information around issued Identity Tokens"], [0, 1, 1, 0, "User", "Model Representing a User"]], "py_auth_micro.Models.Token": [[0, 4, 1, 0, "create_access_jwt", "Creates an Access JWT"], [0, 4, 1, 0, "get_id_jwt", "This Function will create a new ID-JWT"], [0, 4, 1, 0, "verify_id_jwt", "Checks an ID-JWT"]], "py_auth_micro.Models.Token.get_id_jwt": [[0, 2, 2, 0, "app_cfg", "Some misc. Config (important for the Validity duration of the Token)"], [0, 2, 2, 0, "jwt_encoder", "JWTEncoder which should be used to create the Token."]], "py_auth_micro.Models.Token.verify_id_jwt": [[0, 2, 2, 0, "id_jwt", "The JWT to verify"], [0, 2, 2, 0, "ip", "IP-Address of the Requesting Party. Defaults to None. (is not checked against if its None)"], [0, 2, 2, 0, "jwt_validator", "JWT-Validator holding Information about our trusted Issuers (should contain ourself)"]], "py_auth_micro.Models.User": [[0, 4, 1, 0, "create_id_token", "Creates a Token instance."], [0, 4, 1, 0, "revoke_id_token", "Revokes the ID-Token by deleting the Database Entity Representing it."]], "py_auth_micro.Models.User.create_id_token": [[0, 2, 2, 0, "app_config", "AppConfig specifying the Lifetime of the Token."], [0, 2, 2, 0, "ip", "IP which the Token is bound to. Defaults to *."], [0, 2, 2, 0, "jwt_encoder", "JWTEncoder instance which specifies the SigingMethod."], [0, 2, 2, 0, "vhost", "For which VHost the Token is valid for. Defaults to \"/\"."]], "py_auth_micro.WorkFlows": [[0, 1, 1, 0, "GroupWorkflow", "This Helper Class contains all interactions related to Groups and Group Memberships."], [0, 1, 1, 0, "SessionWorkflow", "This Helper Class contains all interactions related to Sessions."], [0, 1, 1, 0, "UserWorkflow", "This Helper Class contains all interactions related to Users."]], "py_auth_micro.WorkFlows.GroupWorkflow.__init__": [[0, 2, 2, 0, "app_cfg", "Some miscellaneous settings regarding the Application."], [0, 2, 2, 0, "jwt_validator", "JWTValidator used to check Tokens with."]], "py_auth_micro.WorkFlows.GroupWorkflow": [[0, 4, 1, 0, "add_user_to_group", "Adds a User to a group"], [0, 4, 1, 0, "create_group", "Creates a Group with the specified Name"], [0, 4, 1, 0, "delete_group", "Deletes the specified Group."], [0, 4, 1, 0, "get_groups", "This Function returns a list of all Groups"], [0, 4, 1, 0, "remove_user_from_group", "Removes a User from a group"]], "py_auth_micro.WorkFlows.GroupWorkflow.add_user_to_group": [[0, 2, 2, 0, "access_token", "Access Token of the Requesting User."], [0, 2, 2, 0, "group_name", "Name of the Group to add the User to."], [0, 2, 2, 0, "user_name", "Name of the User to add to the Group."]], "py_auth_micro.WorkFlows.GroupWorkflow.create_group": [[0, 2, 2, 0, "access_token", "Access-Token of the Requesting User."], [0, 2, 2, 0, "group_name", "Name of the Group to create."]], "py_auth_micro.WorkFlows.GroupWorkflow.delete_group": [[0, 2, 2, 0, "access_token", "Access-Token of the Requesting User."], [0, 2, 2, 0, "group_name", "Name of the Group to delete."]], "py_auth_micro.WorkFlows.GroupWorkflow.get_groups": [[0, 2, 2, 0, "access_token", "Access-Token of the Requesting User."]], "py_auth_micro.WorkFlows.GroupWorkflow.remove_user_from_group": [[0, 2, 2, 0, "access_token", "Access Token of the Requesting User."], [0, 2, 2, 0, "group_name", "Name of the Group to remove the User from."], [0, 2, 2, 0, "user_name", "Name of the User to remove the Group."]], "py_auth_micro.WorkFlows.SessionWorkflow.__init__": [[0, 2, 2, 0, "app_cfg", "Some miscellaneous settings regarding the Application."], [0, 2, 2, 0, "jwt_encoder", "JWTEncoder used to create Tokens."], [0, 2, 2, 0, "jwt_validator", "JWTValidator used to check Tokens with."], [0, 2, 2, 0, "ldap_cfg", "Configuration regarding the LDAP connection."]], "py_auth_micro.WorkFlows.SessionWorkflow": [[0, 4, 1, 0, "get_access_token", "Verifies an ID-Token and returns an Access-Token"], [0, 4, 1, 0, "login", "This Function checks the User Credentials and returns an ID-Token on success."], [0, 4, 1, 0, "logout", "Invalidates the ID-Token given and thereby logs the User out"]], "py_auth_micro.WorkFlows.SessionWorkflow.get_access_token": [[0, 2, 2, 0, "id_token", "The ID-Token of the Requesting User"], [0, 2, 2, 0, "ip", "IP-Address of the requesting User. Defaults to \"*\"."]], "py_auth_micro.WorkFlows.SessionWorkflow.login": [[0, 2, 2, 0, "ip", "IP of the Host making the Request. The ID-Token gets bound to that Request-IP. Defaults to \"*\"."], [0, 2, 2, 0, "password", "Password of the User."], [0, 2, 2, 0, "username", "Username of the User."], [0, 2, 2, 0, "vhost", "VHost for which the ID-Token is valid. Defaults to \"test\"."]], "py_auth_micro.WorkFlows.SessionWorkflow.logout": [[0, 2, 2, 0, "id_token", "The ID-Token as JWT"], [0, 2, 2, 0, "ip", "IP Address making the Request. Used for validating the ID-Token. Defaults to \"*\"."]], "py_auth_micro.WorkFlows.UserWorkflow.__init__": [[0, 2, 2, 0, "app_cfg", "Some miscellaneous settings regarding the Application."], [0, 2, 2, 0, "jwt_validator", "JWTValidator used to check Tokens with."]], "py_auth_micro.WorkFlows.UserWorkflow": [[0, 4, 1, 0, "admin_create_user", "Lets an administrator create an User"], [0, 4, 1, 0, "change_user", "Used to change a User"], [0, 4, 1, 0, "delete_user", "A user can delete himself or an Administrator can do so as well"], [0, 4, 1, 0, "get_all", "Returns a list of all Usernames."], [0, 4, 1, 0, "get_user", "Returns a dictionary containing Userinformation."], [0, 4, 1, 0, "register_user", "This Function is for User Registration"]], "py_auth_micro.WorkFlows.UserWorkflow.admin_create_user": [[0, 2, 2, 0, "access_token", "Access Token of the Administrator"], [0, 2, 2, 0, "email", "Email of the new User."], [0, 2, 2, 0, "password", "Password of the new User."], [0, 2, 2, 0, "username", "Username of the new User."]], "py_auth_micro.WorkFlows.UserWorkflow.change_user": [[0, 2, 2, 0, "access_token", "Token of the Requesting User."], [0, 2, 2, 0, "activated", "Activation State for the User. Defaults to None."], [0, 2, 2, 0, "email", "new Email of the User. Defaults to None."], [0, 2, 2, 0, "password", "New Password. Defaults to None."], [0, 2, 2, 0, "username", "username of the User we want to change Information for"]], "py_auth_micro.WorkFlows.UserWorkflow.delete_user": [[0, 2, 2, 0, "access_token", "Token of the requesting user."], [0, 2, 2, 0, "username", "username of the user to be deleted."]], "py_auth_micro.WorkFlows.UserWorkflow.get_all": [[0, 2, 2, 0, "access_token", "Access Token of the Requesting User"]], "py_auth_micro.WorkFlows.UserWorkflow.get_user": [[0, 2, 2, 0, "access_token", "Access Token of the Requesting User. Defaults to None."], [0, 2, 2, 0, "username", "Username of the User we want the Data from"]], "py_auth_micro.WorkFlows.UserWorkflow.register_user": [[0, 2, 2, 0, "email", "Email Address of the User"], [0, 2, 2, 0, "password", "Password of the User"], [0, 2, 2, 0, "password_confirm", "Confirmation of the Password"], [0, 2, 2, 0, "username", "Username."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:parameter", "3": "py:property", "4": "py:method", "5": "py:attribute", "6": "py:exception", "7": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "property", "Python property"], "4": ["py", "method", "Python method"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "exception", "Python exception"], "7": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "refer": 0, "config": 0, "submodul": 0, "core": 0, "warn": 0, "except": 0, "loginhandl": 0, "note": 0, "model": 0, "workflow": 0, "import": 0, "exampl": 1, "get": 2, "start": 2, "requir": 2, "instal": 2, "via": 2, "pypi": 2, "from": 2, "sourc": 2, "gener": 3, "content": 4}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"API Reference": [[0, "api-reference"]], "Config Submodule": [[0, "module-py_auth_micro.Config"]], "Core Submodule": [[0, "module-py_auth_micro.Core"]], "Warning": [[0, null]], "Exceptions Submodule": [[0, "module-py_auth_micro.Exceptions"]], "LoginHandler Submodule": [[0, "module-py_auth_micro.LoginHandler"]], "Note": [[0, null], [0, null]], "Models Submodule": [[0, "module-py_auth_micro.Models"]], "WorkFlows Submodule": [[0, "module-py_auth_micro.WorkFlows"]], "Important": [[0, null]], "Examples": [[1, "examples"]], "Getting started": [[2, "getting-started"]], "Requirements": [[2, "requirements"]], "Installation": [[2, "installation"]], "via PyPi": [[2, "via-pypi"]], "From Source": [[2, "from-source"]], "General": [[3, "general"]], "Content": [[4, "content"]]}, "indexentries": {"alreadyexists": [[0, "py_auth_micro.Exceptions.AlreadyExists"]], "appconfig (class in py_auth_micro.config)": [[0, "py_auth_micro.Config.AppConfig"]], "authsource (class in py_auth_micro.core)": [[0, "py_auth_micro.Core.AuthSource"]], "dbconfig (class in py_auth_micro.config)": [[0, "py_auth_micro.Config.DBConfig"]], "group (class in py_auth_micro.models)": [[0, "py_auth_micro.Models.Group"]], "groupworkflow (class in py_auth_micro.workflows)": [[0, "py_auth_micro.WorkFlows.GroupWorkflow"]], "kerberos (py_auth_micro.core.authsource attribute)": [[0, "py_auth_micro.Core.AuthSource.KERBEROS"]], "ldap (py_auth_micro.core.authsource attribute)": [[0, "py_auth_micro.Core.AuthSource.LDAP"]], "ldapconfig (class in py_auth_micro.config)": [[0, "py_auth_micro.Config.LDAPConfig"]], "ldaphelper (class in py_auth_micro.core)": [[0, "py_auth_micro.Core.LDAPHelper"]], "local (py_auth_micro.core.authsource attribute)": [[0, "py_auth_micro.Core.AuthSource.LOCAL"]], "loginbaseclass (class in py_auth_micro.loginhandler)": [[0, "py_auth_micro.LoginHandler.LoginBaseClass"]], "loginkerberos (class in py_auth_micro.loginhandler)": [[0, "py_auth_micro.LoginHandler.LoginKerberos"]], "loginldap (class in py_auth_micro.loginhandler)": [[0, "py_auth_micro.LoginHandler.LoginLDAP"]], "loginlocal (class in py_auth_micro.loginhandler)": [[0, "py_auth_micro.LoginHandler.LoginLocal"]], "sessionworkflow (class in py_auth_micro.workflows)": [[0, "py_auth_micro.WorkFlows.SessionWorkflow"]], "token (class in py_auth_micro.models)": [[0, "py_auth_micro.Models.Token"]], "user (class in py_auth_micro.models)": [[0, "py_auth_micro.Models.User"]], "userworkflow (class in py_auth_micro.workflows)": [[0, "py_auth_micro.WorkFlows.UserWorkflow"]], "add_user_to_group() (py_auth_micro.workflows.groupworkflow method)": [[0, "py_auth_micro.WorkFlows.GroupWorkflow.add_user_to_group"]], "admin_create_user() (py_auth_micro.workflows.userworkflow method)": [[0, "py_auth_micro.WorkFlows.UserWorkflow.admin_create_user"]], "change_user() (py_auth_micro.workflows.userworkflow method)": [[0, "py_auth_micro.WorkFlows.UserWorkflow.change_user"]], "connection_string (py_auth_micro.config.dbconfig property)": [[0, "py_auth_micro.Config.DBConfig.connection_string"]], "create_access_jwt() (py_auth_micro.models.token method)": [[0, "py_auth_micro.Models.Token.create_access_jwt"]], "create_group() (py_auth_micro.workflows.groupworkflow method)": [[0, "py_auth_micro.WorkFlows.GroupWorkflow.create_group"]], "create_id_token() (py_auth_micro.models.user method)": [[0, "py_auth_micro.Models.User.create_id_token"]], "delete_group() (py_auth_micro.workflows.groupworkflow method)": [[0, "py_auth_micro.WorkFlows.GroupWorkflow.delete_group"]], "delete_user() (py_auth_micro.workflows.userworkflow method)": [[0, "py_auth_micro.WorkFlows.UserWorkflow.delete_user"]], "email (py_auth_micro.core.ldaphelper property)": [[0, "py_auth_micro.Core.LDAPHelper.email"]], "get_access_token() (py_auth_micro.workflows.sessionworkflow method)": [[0, "py_auth_micro.WorkFlows.SessionWorkflow.get_access_token"]], "get_all() (py_auth_micro.workflows.userworkflow method)": [[0, "py_auth_micro.WorkFlows.UserWorkflow.get_all"]], "get_groups() (py_auth_micro.core.ldaphelper method)": [[0, "py_auth_micro.Core.LDAPHelper.get_groups"]], "get_groups() (py_auth_micro.workflows.groupworkflow method)": [[0, "py_auth_micro.WorkFlows.GroupWorkflow.get_groups"]], "get_id_jwt() (py_auth_micro.models.token method)": [[0, "py_auth_micro.Models.Token.get_id_jwt"]], "get_user() (py_auth_micro.workflows.userworkflow method)": [[0, "py_auth_micro.WorkFlows.UserWorkflow.get_user"]], "login() (in module py_auth_micro.loginhandler)": [[0, "py_auth_micro.LoginHandler.login"]], "login() (py_auth_micro.core.ldaphelper method)": [[0, "py_auth_micro.Core.LDAPHelper.login"]], "login() (py_auth_micro.loginhandler.loginldap method)": [[0, "py_auth_micro.LoginHandler.LoginLDAP.login"]], "login() (py_auth_micro.loginhandler.loginlocal method)": [[0, "py_auth_micro.LoginHandler.LoginLocal.login"]], "login() (py_auth_micro.workflows.sessionworkflow method)": [[0, "py_auth_micro.WorkFlows.SessionWorkflow.login"]], "logout() (py_auth_micro.workflows.sessionworkflow method)": [[0, "py_auth_micro.WorkFlows.SessionWorkflow.logout"]], "module": [[0, "module-py_auth_micro.Config"], [0, "module-py_auth_micro.Core"], [0, "module-py_auth_micro.Exceptions"], [0, "module-py_auth_micro.LoginHandler"], [0, "module-py_auth_micro.Models"], [0, "module-py_auth_micro.WorkFlows"]], "py_auth_micro.config": [[0, "module-py_auth_micro.Config"]], "py_auth_micro.core": [[0, "module-py_auth_micro.Core"]], "py_auth_micro.exceptions": [[0, "module-py_auth_micro.Exceptions"]], "py_auth_micro.loginhandler": [[0, "module-py_auth_micro.LoginHandler"]], "py_auth_micro.models": [[0, "module-py_auth_micro.Models"]], "py_auth_micro.workflows": [[0, "module-py_auth_micro.WorkFlows"]], "register_user() (py_auth_micro.workflows.userworkflow method)": [[0, "py_auth_micro.WorkFlows.UserWorkflow.register_user"]], "remove_user_from_group() (py_auth_micro.workflows.groupworkflow method)": [[0, "py_auth_micro.WorkFlows.GroupWorkflow.remove_user_from_group"]], "revoke_id_token() (py_auth_micro.models.user method)": [[0, "py_auth_micro.Models.User.revoke_id_token"]], "sslcontext (py_auth_micro.config.dbconfig property)": [[0, "py_auth_micro.Config.DBConfig.sslcontext"]], "to_dict() (py_auth_micro.config.dbconfig method)": [[0, "py_auth_micro.Config.DBConfig.to_dict"]], "verify_id_jwt() (py_auth_micro.models.token static method)": [[0, "py_auth_micro.Models.Token.verify_id_jwt"]]}, "docurls": ["api_reference.html", "examples.html", "getting_started.html", "index.html", "toc.html"]})